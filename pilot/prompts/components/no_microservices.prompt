# This is a monolithic application to perform user registration, login, and post creation.

# First, let's create a User class to represent a user
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.posts = []

    def set_password(self, new_password):
        self.password = new_password

    def add_post(self, post):
        self.posts.append(post)

# Next, let's create a Post class to represent a post
class Post:
    def __init__(self, title, content):
        self.title = title
        self.content = content

# Now, let's create a UserManager class to manage users
class UserManager:
    def __init__(self):
        self.users = {}

        # In a real application, you would want to securely store user passwords
        # but for the sake of simplicity, we'll just store them as plain text
        self.users['user1'] = User('user1', 'password1')
        self.users['user2'] = User('user2', 'password2')

    def authenticate(self, username, password):
        if username in self.users and self.users[username].password == password:
            return self.users[username]
        else:
            return None

# Finally, let's create a PostManager class to manage posts
class PostManager:
    def __init__(self):
        self.posts = {}

    def create_post(self, user, title, content):
        post = Post(title, content)
        user.add_post(post)
        self.posts[post.title] = post

# Now, let's create instances of the UserManager and PostManager classes
user_manager = UserManager()
post_manager = PostManager()

# Here are some sample user interactions

# User registration
new_user = User('newuser', 'newpassword')
user_manager.users['newuser'] = new_user

# User login
logged_in_user = user_manager.authenticate('user1', 'password1')

# Post creation
post_manager.create_post(logged_in_user, 'Sample Post', 'This is a sample post.')

